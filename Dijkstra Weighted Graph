#include<bits/stdc++.h>
using namespace std;
const int r = 100000;
int edge_cost[1000][1000];
int dis[r+10];
bool vis[r+10];
int inf = 1000000000;

void dijkstra(int s,vector < int > vc[],vector < int > arr)
{
    queue < int > q;
    q.push(s);
    dis[s] = 0;
    vis[s] = 1;
    while(!q.empty())
    {
        int node = q.front();
        q.pop();
        for(int i = 0; i < vc[node].size(); ++i)
        {
            int next = vc[node][i];
            if(dis[node] + edge_cost[node][next] < dis[next])
                dis[next] = dis[node] + edge_cost[node][next];
            if(!vis[next])
                q.push(next),vis[next] = 1;
            
        }
    }
    sort(arr.begin(),arr.end());
    cout << "Distance of per vertex : \n";
    for(int i = 0; i < arr.size(); ++i)
        printf("i = %d, distance = %d\n",arr[i],dis[arr[i]]);
}
// 9
// 1 2
// 14
// 2 3
// 2
// 1 3
// 9
// 1 6
// 7
// 3 5
// 11
// 6 5
// 15
// 2 4
// 8
// 4 5
// 6
// 3 6
// 10
// 1

int main()
{
    int edge;
    while(cin >> edge)
    {
        vector < int > vc[10000];
        memset(vis,0,sizeof(vis));
        fill(dis,dis+r+10,inf);
        memset(edge_cost,0,sizeof(edge_cost));
        vector < int > arr;
        bool b[r+10];
        memset(b,0,sizeof(b));
        for(int i = 0;i < edge; ++i)
        {
            int u,v;
            cin >> u >> v;
            cin >> edge_cost[u][v];
            if(!b[u])
                b[u] = 1,arr.push_back(u);
            if(!b[v])
                b[v] = 1,arr.push_back(v);
            vc[u].push_back(v);
            vc[v].push_back(u);
            edge_cost[v][u] = edge_cost[u][v];
        }
        int source;
        cin >> source;
        dijkstra(source,vc,arr);
    }
    return 0;
}
