#include<bits/stdc++.h>
using namespace std;
int timee;
void articulation_point(vector < int > gh[],int u,bool *vs,int *lw,int *di,int *pr)
{
    vs[u] = 1;
    di[u] = lw[u] = ++timee;

    for(int i = 0; i < gh[u].size(); ++i)
    {
        int v = gh[u][i];
        if(!vs[v])
        {
            pr[v] = u;
            articulation_point(gh,v,vs,lw,di,pr);
            lw[u] = min(lw[u] , lw[v]);

            if(lw[v] >= di[u])
                cout << u << "  is articulation point" << endl;
        }
        else if(v != pr[u])
            lw[u] = min(lw[u] ,di[v]);
    }
}

int main()
{
    int n, e;
    while(cin >> n >> e)
    {
        vector < int > gh[210];
        for(int i = 0; i < e; ++i)
        {
            int u, v;
            cin >> u >> v;
            gh[u].push_back(v);
            gh[v].push_back(u);
        }
        bool vs[210];
        int low[210], discovery[210],parent[210];
        memset(vs,0,sizeof(vs));
        memset(low,0,sizeof(low));
        memset(discovery,0,sizeof(discovery));
        memset(parent,-1,sizeof(parent));
        timee = 0;

        articulation_point(gh,0,vs,low,discovery,parent);

        for(int i = 0; i <= 5; ++i)
            printf("low[%d] = %d, discover[%d] = %d\n",i,low[i],i,discovery[i]);
    }
    return 0;
}
